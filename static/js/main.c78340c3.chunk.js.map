{"version":3,"sources":["components/Card.jsx","components/Cards.jsx","components/Image.jsx","components/Images.jsx","components/Container.jsx","App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","img","user","description","permalink","target","className","src","alt","href","name","icon","data-toggle","data-placement","title","type","Cards","useState","data","setData","input","setInput","getData","useCallback","a","url","key","encodeURI","fetch","res","json","d","results","useEffect","onSubmit","e","preventDefault","text","value","placeholder","map","urls","regular","alt_description","links","html","id","Image","Images","images","setImages","getImages","Container","library","add","fab","faStar","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.c78340c3.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Card = ({img, user, description, permalink, target}) => {\r\n\r\n    return (\r\n        <article className=\"card flex flex-col\">\r\n\r\n                    {/* card image */}\r\n                    <div className=\"h-36 overflow-hidden relative\">                                    \r\n                            <img className=\"h-36 w-full object-cover transition duration-300 transform hover:scale-125\" src={img} alt=\"\" />      \r\n                    </div>\r\n\r\n                    {/* card body */}\r\n                    <div className=\"card-body flex-1 flex flex-col\">\r\n                        {/* <!-- resource type --> */}\r\n                        <p className=\"text-sm text-gray-500 mb-2\">Tipo curso</p>\r\n                        {/* <!-- course title --> */}\r\n                        <a href={permalink} target={target}>\r\n                            <h2 className=\"card-title\">{description}</h2>\r\n                        </a>\r\n                        <p className=\"text-gray-500 text-sm mb-2 mt-auto\">{user.name}</p>\r\n                        <div className=\"flex mb-4 items-center\">\r\n                            {/* <!-- rating value --> */}\r\n                            <span className=\"text-xl font-bold text-yellow-300\">5</span>\r\n\r\n                            {/* <!-- rating stars --> */}\r\n                            <ul className=\"flex text-sm ml-2\">\r\n                                <li className=\"mr-1\"><FontAwesomeIcon icon=\"star\" className=\"text-yellow-300\"/></li>\r\n                                <li className=\"mr-1\"><FontAwesomeIcon icon=\"star\" className=\"text-yellow-300\"/></li>\r\n                                <li className=\"mr-1\"><FontAwesomeIcon icon=\"star\" className=\"text-yellow-300\"/></li>\r\n                                <li className=\"mr-1\"><FontAwesomeIcon icon=\"star\" className=\"text-yellow-300\"/></li>\r\n                                <li className=\"mr-1\"><FontAwesomeIcon icon=\"star\" className=\"text-yellow-300\"/></li>\r\n                                {/* <li className=\"mr-1\"><i className=\"fas fa-star text-yellow-300\"></i></li>                 */}\r\n                            </ul>\r\n                            {/* <!-- users enrolled --> */}\r\n                            <p className=\"text-sm text-gray-500 ml-auto\">\r\n                                <i className=\"fas fa-users\"></i>\r\n                                10 usuarios\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"flex mb-2\">\r\n                            <p className=\"text-lg text-gray-700 font-semibold\">\r\n                                Gratis\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"flex mb-2\">\r\n                            <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" className=\"mr-2 bg-gray-300 text-gray text-sm p-1 rounded  leading-none flex items-center focus:outline-none\" title=\"\">\r\n                                Categor√≠a\r\n                            </a>\r\n                            <button type=\"button\" data-toggle=\"tooltip\" data-placement=\"top\" className=\"mr-2 bg-gray-300 text-gray text-sm p-1 rounded  leading-none flex items-center focus:outline-none\" title=\"Nivel\">\r\n                                Principiante\r\n                            </button>            \r\n                        </div>\r\n                        <div className=\"flex justify-end\">\r\n                            <span className=\"text-gray-500 text-xs\" title=\"Modalidad\">B-Learning</span>\r\n                        </div>\r\n                    </div>\r\n                </article>\r\n    )\r\n}\r\n\r\nCard.propTypes = {\r\n    img: PropTypes.string,\r\n    user: PropTypes.object,\r\n    description: PropTypes.string,\r\n    permalink: PropTypes.string,\r\n    target: PropTypes.string\r\n}\r\n\r\nexport default Card\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport Card from \"./Card\";\r\n\r\nconst Cards = () => {\r\n\r\n    const [data, setData] = useState([]);    \r\n    const [input, setInput] = useState(\"\");\r\n\r\n    // const [data, setData] = useState({\r\n    //     urls: {\r\n    //         regular: \"\",\r\n    //     },\r\n    //     user: {\r\n    //         name: \"\",\r\n    //     },\r\n    //     links: {\r\n    //         html: \"\",\r\n    //     },\r\n    // });   \r\n\r\n    const getData = useCallback(\r\n        async () => {\r\n            // const res = await fetch(\"https://api.unsplash.com/photos/random/?client_id=sMq_JZHrxRjw0sQUZpX10-EkQD-E8b8r3In_XSSUwdY\") // random image\r\n\r\n            const key = \"client_id=sMq_JZHrxRjw0sQUZpX10-EkQD-E8b8r3In_XSSUwdY\";\r\n\r\n            let url = `https://api.unsplash.com/photos/?${key}`;\r\n            let per_page = 15;\r\n\r\n            if(input !== \"\"){\r\n                url = `https://api.unsplash.com/search/photos/?query=${encodeURI(input)}&per_page=${per_page}&${key}`;\r\n            }\r\n\r\n            const res = await fetch(url) // collection\r\n\r\n            const d = await res.json()\r\n\r\n            if(d.results){\r\n                // console.log(d)\r\n                setData(d.results);\r\n            } else {\r\n                setData(d);\r\n            }        \r\n        }, [input] );     \r\n\r\n    useEffect(() => {\r\n        getData();        \r\n    }, [getData]);    \r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        //console.log(e.target[0].value);\r\n        const text = e.target[0].value;\r\n\r\n        setInput(text);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    <input type=\"text\" name=\"inputSearch\" placeholder=\"Buscar imagen...\" className=\"w-full border-2 border-gray-300 bg-white h-14 px-5 pr-16 rounded-lg text-md focus:outline-none\"/>\r\n                </label>\r\n            </form>\r\n            {\r\n                data.map((res) => {\r\n                    return <Card key={res.id} img={res.urls.regular} user={res.user} description={res.alt_description} permalink={res.links.html} target={\"_blank\"}/>\r\n                })\r\n            }\r\n            {/* <Card img={data.urls.regular} user={data.user} description={data.alt_description} permalink={data.links.html} target={\"_blank\"}/> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Image = ({img, user, description, permalink, target}) => {\r\n    return (\r\n        <article className=\"card flex flex-col\">\r\n\r\n                    {/* card image */}\r\n                    <div className=\"h-36 overflow-hidden relative\">                                    \r\n                            <img className=\"h-36 w-full object-cover transition duration-300 transform hover:scale-125\" src={img} alt=\"\" />      \r\n                    </div>\r\n\r\n                    {/* card body */}\r\n                    <div className=\"card-body flex-1 flex flex-col\">                    \r\n                        <a href={permalink} target={target}>\r\n                            <h2 className=\"card-title\">{description}</h2>\r\n                        </a>\r\n                        <p className=\"text-gray-500 text-sm mb-2\">{user.name}</p>                    \r\n                    </div>\r\n                </article>\r\n    )\r\n}\r\n\r\nImage.propTypes = {\r\n    img: PropTypes.string,\r\n    user: PropTypes.object,\r\n    description: PropTypes.string,\r\n    permalink: PropTypes.string,\r\n    target: PropTypes.string\r\n}\r\n\r\nexport default Image\r\n\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport Image from './Image'\r\n\r\nconst Images = () => {\r\n\r\n    const [images, setImages] = useState([])    \r\n    const [input, setInput] = useState(\"\");\r\n\r\n    // const [images, setImages] = useState({\r\n    //     urls: {\r\n    //         regular: \"\",\r\n    //     },\r\n    //     user: {\r\n    //         name: \"\",\r\n    //     },\r\n    //     links: {\r\n    //         html: \"\",\r\n    //     }\r\n    // })    \r\n\r\n    const getImages = useCallback(\r\n        async () => {\r\n            // const res = await fetch('https://api.unsplash.com/photos/random/?client_id=sMq_JZHrxRjw0sQUZpX10-EkQD-E8b8r3In_XSSUwdY') // random image\r\n\r\n            const key = \"client_id=sMq_JZHrxRjw0sQUZpX10-EkQD-E8b8r3In_XSSUwdY\";        \r\n\r\n            let url = `https://api.unsplash.com/photos/?${key}`;\r\n\r\n            if(input !== \"\"){\r\n                url = `https://api.unsplash.com/search/photos/?query=${encodeURI(input)}&${key}`;\r\n            };\r\n\r\n            const res = await fetch(url) // collection\r\n\r\n            const d = await res.json()\r\n\r\n            if(d.results){\r\n                setImages(d.results)\r\n            } else {\r\n                // console.log(d)\r\n                setImages(d)\r\n            }        \r\n        }, [input] );\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        getImages();       \r\n    }, [getImages]);    \r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        //console.log(e.target[0].value);\r\n        const text = e.target[0].value;\r\n\r\n        setInput(text);\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <form onSubmit={handleSubmit}>\r\n                <label>\r\n                    <input type=\"text\" name=\"inputImage\" placeholder=\"Buscar imagen...\" className=\"w-full border-2 border-gray-300 bg-white h-14 px-5 pr-16 rounded-lg text-md focus:outline-none\"/>\r\n                </label>\r\n            </form>           \r\n            {\r\n                images.map((img) => {\r\n                    return <Image key={img.id} img={img.urls.regular} user={img.user} description={img.alt_description} permalink={img.links.html} target={\"_blank\"}/>\r\n                })\r\n            }\r\n            {/* <Image img={images.urls.regular} user={images.user} description={images.alt_description} permalink={images.links.html} target={\"_blank\"}/> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Images\r\n","import React from 'react'\r\nimport Cards from './Cards'\r\nimport Images from './Images'\r\n// import Search from './Search'\r\n\r\nconst Container = () => {\r\n    return (       \r\n        <>\r\n            {/* <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-12\">\r\n                <Search />\r\n            </div> */}\r\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n                <div className=\"flex pb-12\">\r\n                    <h1 className=\"font-bold text-2xl\">Cards</h1>\r\n                </div> \r\n                <div className=\"grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-6 gap-y-8\">                                   \r\n                    <Cards />                              \r\n                </div>\r\n            </div>\r\n\r\n            <hr/>\r\n\r\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\r\n                <div className=\"flex pb-12\">\r\n                    <h1 className=\"font-bold text-2xl\">Imagenes</h1>\r\n                </div> \r\n                <div className=\"grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-6 gap-y-8\">                                   \r\n                    <Images />                              \r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Container\r\n","import React from 'react';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport {faStar} from '@fortawesome/free-solid-svg-icons'\nimport './App.css';\nimport Container from \"./components/Container\";\n\nlibrary.add(fab, faStar)\n\nconst title = <h1 className=\"text-2xl font-bold text-white\">React Gallery App</h1>\n\nfunction App() {\n  return (\n    <>\n      <div className=\"bg-gray-800\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-6 gap-y-8 py-8 items-center bg-gray-800\">\n          {title}\n        </div>\n      </div>\n      <Container />  \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}